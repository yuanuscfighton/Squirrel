import axios from "axios";

axios({
    url: 'xxxx',
    method: 'POST'
});

// 通过查看 node_modules/axios 文件夹，发现
//（1）axios 库最终打包生成的是 Js 文件（node_modules/axios/dist）
//（2）axios 库源代码也是 Js 文件（node_modules/axios/lib）
//（3）axios 库的入口也是 Js 文件（node_modules/axios/index.js）

// index.d.ts 就是类型声明文件

////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////

/*
    TypeScript 类型声明文件
    1. 第三方库不管是否是用 TS 编写的，最终都要编译成 Js 代码，才能发布给开发者使用
    2. 我们知道是 TS 提供了类型，才有了代码提示和类型保护等机制，但在项目开发中使用第三方库时，你会发现它们几乎都有相应的 TS 类型，这些类型是怎么来的呢？
        ---- 类型声明文件
    3. 类型声明文件：用来为已存在的 Js 库提供类型信息。这样在 TS 项目中使用这些库时，就像用 TS 一样，都会有代码提示、类型保护等机制了


    4. TS 的两种文件类型
    （1）TS 中有两种文件类型：① .ts 文件，② .d.ts 文件
    （2）.ts 文件
        ① 既包含类型信息，又包含可执行代码
        ② 可以被编译为 .js 文件，然后执行代码
        ③ 用途：程序员写代码的位置
    （3）.d.ts 文件
        ① 只包含类型信息的类型声明文件，不包含可执行代码
        ② 不会生成 .js 文件，仅用于提供类型信息
        ③ 用途：为 Js 提供类型信息

   5. 总结
    （1）.ts 是 implementation（代码实现文件）；.d.ts 是 declaration（类型声明文件）
    （2）如果要为 Js 库提供类型信息，要使用 .d.ts 文件
    类型声明文件的使用说明

*/